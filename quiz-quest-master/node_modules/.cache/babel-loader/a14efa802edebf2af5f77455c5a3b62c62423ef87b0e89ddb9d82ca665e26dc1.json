{"ast":null,"code":"var child_process = require('child_process');\n\n// daemonize ourselves\nmodule.exports = function (opt) {\n  // we are a daemon, don't daemonize again\n  if (process.env.__daemon) {\n    return process.pid;\n  }\n  var args = [].concat(process.argv);\n\n  // shift off node\n  args.shift();\n\n  // our script name\n  var script = args.shift();\n  opt = opt || {};\n  var env = opt.env || process.env;\n\n  // the child process will have this set so we can identify it as being daemonized\n  env.__daemon = true;\n\n  // start ourselves as a daemon\n  module.exports.daemon(script, args, opt);\n\n  // parent is done\n  return process.exit();\n};\n\n// daemonizes the script and returns the child process object\nmodule.exports.daemon = function (script, args, opt) {\n  opt = opt || {};\n  var stdout = opt.stdout || 'ignore';\n  var stderr = opt.stderr || 'ignore';\n  var env = opt.env || process.env;\n  var cwd = opt.cwd || process.cwd;\n  var cp_opt = {\n    stdio: ['ignore', stdout, stderr],\n    env: env,\n    cwd: cwd,\n    detached: true\n  };\n\n  // spawn the child using the same node process as ours\n  var child = child_process.spawn(process.execPath, [script].concat(args), cp_opt);\n\n  // required so the parent can exit\n  child.unref();\n  return child;\n};","map":{"version":3,"names":["child_process","require","module","exports","opt","process","env","__daemon","pid","args","concat","argv","shift","script","daemon","exit","stdout","stderr","cwd","cp_opt","stdio","detached","child","spawn","execPath","unref"],"sources":["C:/Users/Kayha/node_modules/daemon/index.js"],"sourcesContent":["var child_process = require('child_process');\n\n// daemonize ourselves\nmodule.exports = function(opt) {\n    // we are a daemon, don't daemonize again\n    if (process.env.__daemon) {\n        return process.pid;\n    }\n\n    var args = [].concat(process.argv);\n\n    // shift off node\n    args.shift();\n\n    // our script name\n    var script = args.shift();\n\n    opt = opt || {};\n    var env = opt.env || process.env;\n\n    // the child process will have this set so we can identify it as being daemonized\n    env.__daemon = true;\n\n    // start ourselves as a daemon\n    module.exports.daemon(script, args, opt);\n\n    // parent is done\n    return process.exit();\n};\n\n// daemonizes the script and returns the child process object\nmodule.exports.daemon = function(script, args, opt) {\n\n    opt = opt || {};\n\n    var stdout = opt.stdout || 'ignore';\n    var stderr = opt.stderr || 'ignore';\n\n    var env = opt.env || process.env;\n    var cwd = opt.cwd || process.cwd;\n\n    var cp_opt = {\n        stdio: ['ignore', stdout, stderr],\n        env: env,\n        cwd: cwd,\n        detached: true\n    };\n\n    // spawn the child using the same node process as ours\n    var child = child_process.spawn(process.execPath, [script].concat(args), cp_opt);\n\n    // required so the parent can exit\n    child.unref();\n\n    return child;\n};\n\n"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE5C;AACAC,MAAM,CAACC,OAAO,GAAG,UAASC,GAAG,EAAE;EAC3B;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,EAAE;IACtB,OAAOF,OAAO,CAACG,GAAG;EACtB;EAEA,IAAIC,IAAI,GAAG,EAAE,CAACC,MAAM,CAACL,OAAO,CAACM,IAAI,CAAC;;EAElC;EACAF,IAAI,CAACG,KAAK,CAAC,CAAC;;EAEZ;EACA,IAAIC,MAAM,GAAGJ,IAAI,CAACG,KAAK,CAAC,CAAC;EAEzBR,GAAG,GAAGA,GAAG,IAAI,CAAC,CAAC;EACf,IAAIE,GAAG,GAAGF,GAAG,CAACE,GAAG,IAAID,OAAO,CAACC,GAAG;;EAEhC;EACAA,GAAG,CAACC,QAAQ,GAAG,IAAI;;EAEnB;EACAL,MAAM,CAACC,OAAO,CAACW,MAAM,CAACD,MAAM,EAAEJ,IAAI,EAAEL,GAAG,CAAC;;EAExC;EACA,OAAOC,OAAO,CAACU,IAAI,CAAC,CAAC;AACzB,CAAC;;AAED;AACAb,MAAM,CAACC,OAAO,CAACW,MAAM,GAAG,UAASD,MAAM,EAAEJ,IAAI,EAAEL,GAAG,EAAE;EAEhDA,GAAG,GAAGA,GAAG,IAAI,CAAC,CAAC;EAEf,IAAIY,MAAM,GAAGZ,GAAG,CAACY,MAAM,IAAI,QAAQ;EACnC,IAAIC,MAAM,GAAGb,GAAG,CAACa,MAAM,IAAI,QAAQ;EAEnC,IAAIX,GAAG,GAAGF,GAAG,CAACE,GAAG,IAAID,OAAO,CAACC,GAAG;EAChC,IAAIY,GAAG,GAAGd,GAAG,CAACc,GAAG,IAAIb,OAAO,CAACa,GAAG;EAEhC,IAAIC,MAAM,GAAG;IACTC,KAAK,EAAE,CAAC,QAAQ,EAAEJ,MAAM,EAAEC,MAAM,CAAC;IACjCX,GAAG,EAAEA,GAAG;IACRY,GAAG,EAAEA,GAAG;IACRG,QAAQ,EAAE;EACd,CAAC;;EAED;EACA,IAAIC,KAAK,GAAGtB,aAAa,CAACuB,KAAK,CAAClB,OAAO,CAACmB,QAAQ,EAAE,CAACX,MAAM,CAAC,CAACH,MAAM,CAACD,IAAI,CAAC,EAAEU,MAAM,CAAC;;EAEhF;EACAG,KAAK,CAACG,KAAK,CAAC,CAAC;EAEb,OAAOH,KAAK;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}